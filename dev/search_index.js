var documenterSearchIndex = {"docs":
[{"location":"#SolarChem","page":"Home","title":"SolarChem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SolarChem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#SolarChem.oxideconversion","page":"Home","title":"SolarChem.oxideconversion","text":"oxideconversion\n\nA NamedTuple with names of elements corresponding to a multiplicative factor to convert oxide composition to elemental composition. Fe corresponds to ferrous iron (FeO) and Fe3 to ferric iron (Fe₂O₃). oxideconversion is a const within the scope of the SolarChem module. \n\n\n\nCaO * oxideconversion.Ca = Ca\n\nCa / oxideconversion.Ca = CaO\n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.strelements","page":"Home","title":"SolarChem.strelements","text":"SolarChem.strelements\n\nA Tuple containing all elements in order of increasing Z (up to Z=96) as a String followed by a space. Derived from SolarChem.periodictable for use inside SolarChem.loadastromatdata. A const within the scope of the SolarChem module. \n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.Composition","page":"Home","title":"SolarChem.Composition","text":"Composition\n\nCustom struct that contains a chemical composition, represented as the normally distributed mean m and standard deviation s of the measured/modeled composition.\n\n\n\n\n\n","category":"type"},{"location":"#SolarChem.Fractions","page":"Home","title":"SolarChem.Fractions","text":"Fractions(outer, sun)\n\nCustom struct with proposed mixture parameters: the fractional contribution of outer solar system material (inner solar system contribution = 1 - outer) to the solar budget and the mass fraction of the sun worth of chondritic material added to the solar photosphere.\n\n\n\n\n\n","category":"type"},{"location":"#SolarChem.LoddersFegley1998-Tuple{}","page":"Home","title":"SolarChem.LoddersFegley1998","text":"LoddersFegley1998()\n\nReturns a NamedTuple containing the meteorite chemistry data reported in Tables 2.3, 16.10, and 16.11 of Lodders & Fegley  (1998, The Planetary Scientist's Companion, Oxford University Press). \n\nFields include element names (els), atomic number (z), 50% condensation temperature (Tc), inner solar system mean composition (comprised of EH, EL, H, L, LL, and R groups), and outer solar system mean composition (comprised of CI, CM, CV, CO, CK, and CR groups).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.allsolar-Tuple{}","page":"Home","title":"SolarChem.allsolar","text":"allsolar(; Fe=true)\n\nReturn a Tuple of all elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908). Excludes :Fe by default, but Fe=true will include it. \n\nsee also: lightsolar, mediumsolar, heavysolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.assigngroup-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigngroup","text":"assigngroup(str)\n\nAssign all corresponding genetic groups to a String str containing meteorite group/type information. See innergroups and outergroups for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.assigntype-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigntype","text":"assigntype(str)\n\nAssign all corresponding genetic groups to a String `str` containing meteorite group/type information. See [`innergroups`](@ref) and [`outergroups`](@ref) for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.astromatdata-Tuple{}","page":"Home","title":"SolarChem.astromatdata","text":"    astromatdata(; url, datasets_per_request=1000, save=true, showskipped=false)\n\nGet elemental geochemical data (only) from the AstroMat database for all meteorites, returned as a NamedTuple. The default url string is:\n\n\"https://api.astromat.org/v4/search/results?analysisTypes=rock%3A%3A[WHOLE+ROCK]&taxons=METEORITE&variables=MAJ||REE||TE||VO\"\n\nThis requests whole rock major (MJ), volatile (VO), trace (TE), and rare earth element (REE) data for all meteorites in the database. You may provide your own customized API string, but this is not recommended unless you are familiar with the AstroMat API.\n\nBy default, the function requests 1000 datasets_per_request, which is a roughly optimized amount.\n\nWhen save is set to true or provided with a filepath, the data is serlialized to the provided filepath or to a file automatically labeled astromat-YYYY-MM-DD.jls (reflecting the current date). If false is provided, the output is not saved.\n\nWhen showskipped is true, returns a tuple of the data from astromat, as well as a list of excluded variable names.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapelements-Tuple{Int64, NamedTuple, Tuple{Vararg{Symbol}}}","page":"Home","title":"SolarChem.bootstrapelements","text":"bootstrapelements(n::Int, data::NamedTuple, elements; resamplemeans=true, weighted=true, rng)\n\nReturns a NamedTuple of vectors of n bootstrap resampled data for each element in the Tuple elements. \n\nResamples Monte Carlo'ed means by default. Declare resamplemeans=false to return resampled values. \n\nBy default weights resampling by sample abundance (based on occurences of unique meteorite names (field :name in data). To remove weighting, declare weighted=false. \n\nsee also: trimnans, calcweights, bsresample, bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapratios-Tuple{Int64, NamedTuple, Tuple{Vararg{Symbol}}, Symbol}","page":"Home","title":"SolarChem.bootstrapratios","text":"bootstrapratios(n::Int, data::NamedTuple, elements, divisor::Symbol; resamplemeans=true, fractional=false, weighted=true, rng)\n\nReturns a NamedTuple of vectors of n bootstrap resampled data for each element in the Tuple elements, as a ratio of element/divisor (calculated prior to resampling).\n\nResamples Monte Carlo'ed means by default. Declare resamplemeans=false to return resampled values. \n\nfractional=true resamples ratios as fractions fracxx+y and then algebraically converted to ratios fracxy. This mitigates resampled outliers stemming from small values of y. If fractional=false,  ratios are calculated directly.\n\nBy default weights resampling by sample abundance (based on occurences of unique meteorite names (field :name in data). To remove weighting, declare weighted=false. \n\nsee also: trimnans, calcweights, bsresample, bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsmean!-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsmean!","text":"bsmean!(v, x, σ; w, rng)\n\nIn-place version of bsmean that takes a vector v to fill with resampled means.\n\nsee also: bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsmean-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsmean","text":"bsmean(n, x, σ; w, rng)\n\nReturns a Vector of n means, each calculated from a random resampling (with replacement) of dataset x with (normally distributed) 1σ uncertainties σ. Optionally provide weights (obtained from calcweights, unweighted by default) and a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsresample!-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsresample!","text":"bsresample!(v, x, σ; w, rng)\n\nIn-place version of bsresample that takes a vector v to fill with resamples.\n\nsee also: bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsresample-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsresample","text":"bsresample(n, x, σ; w, rng)\n\nReturns a Vector of n random samples from dataset x with (normally distributed) 1σ uncertainties σ. Optionally provide weights w (obtained from calcweights, unweighted by default) and a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.calcweights-Union{Tuple{Vector}, Tuple{T}} where T<:Number","page":"Home","title":"SolarChem.calcweights","text":"calcweights(v ; weightings)\n\nCalculate weightings for a population v for a non-biased sampling of the population.  Optionally give weightings as a Dict of \"type\" => x to further suppress values of \"type\" by a factor of x.\n\ne.g.     julia> v = [\"a\", \"b\", \"a\"]     julia> calcweights(v)     3-element Vector{Float64}:      0.5      1.0      0.5\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countmeasurements-Tuple{NamedTuple, Tuple{Vararg{Symbol}}}","page":"Home","title":"SolarChem.countmeasurements","text":"countmeasurements(d::NamedTuple, element::Symbol)\n\nReturns the total number of measurements for a given element in d. \n\n\n\ncountmeasurements(d::NamedTuple, elements::Tuple)\n\nReturns a NamedTuple with names in elements and the total number of measurements for each member of elements in d. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countnotnans-Tuple{Any}","page":"Home","title":"SolarChem.countnotnans","text":"SolarChem.countnotnans(x)\n\nCount the number of non-NaN elements in x.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countratios-Union{Tuple{T}, Tuple{NamedTuple, Tuple{Vararg{T}}, T}} where T<:Symbol","page":"Home","title":"SolarChem.countratios","text":"countratios(d::NamedTuple, numerator::Symbol, denomenator::Symbol)\n\nReturns the total number of non-NaN ratios of numerator/denomenator in d. \n\n\n\ncountmeasurements(d::NamedTuple, numerators::Tuple, denomenator::Symbol)\n\nReturns a NamedTuple with names in numerators and the total number of non-NaN ratios in d for each ratio of numerators ./ denomenator.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.estimateuncertainty-Tuple{NamedTuple, Number}","page":"Home","title":"SolarChem.estimateuncertainty","text":"estimateuncertainty(d, unc; uncextrema, minuncs)\n\nCalculate an assumed uncertainty unc (in %) for all analytes in NamedTuple d. Replaces any values outside the bounds of the minimum and maximum percent uncertainty (uncextrema= (0.01%, 50%) by default) with unc. If there are > minuncs (30 by default) uncertainties corresponding to measurements of an analyte, it calculates unreported uncertainties as the mean relative uncertainty of all measurements within uncextrema.\n\nRequires that uncertainties are given as 1σ with keys :sX where X is the analyte name (e.g. :Na -> :sNa).\n\nUsing estimateuncertainty! overwrites d.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.exclude-Union{Tuple{N}, Tuple{NamedTuple, Symbol, NTuple{N, String}}} where N","page":"Home","title":"SolarChem.exclude","text":"exclude(data::NamedTuple, name::Symbol, s)\n\nExclude all indices containing string (or Tuple of strings) s from the specified name in data.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.excludeheated-Tuple{NamedTuple}","page":"Home","title":"SolarChem.excludeheated","text":"excludeheated(d::NamedTuple)\n\nExclude data associated with heating experiments from d. Removes all rows with comments containing °, degrees, 0 C, and 5 C.\n\nsee also: exclude\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.fastll-Union{Tuple{T}, Tuple{T, T, T}} where T<:Float64","page":"Home","title":"SolarChem.fastll","text":"fastll(x, m, s)\n\nCalculate the relative log-likelihood that x is drawn from the Normal distribution m ± s. fastll excludes the additive constant -log(sqrt(2π)*σ), which can be multiplied to summations of exp(fastll(..)) later for accurate likelihood calculations. All inputs must be Float64s.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.fraction2ratio!-Tuple{Vector{Float64}}","page":"Home","title":"SolarChem.fraction2ratio!","text":"fraction2ratio!(x::Vector)\n\nConvert a Vector of fractions x to ratios, as by fraction2ratio.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.fraction2ratio-Tuple{Number}","page":"Home","title":"SolarChem.fraction2ratio","text":"fraction2ratio(x)\n\nAlgebraicaly convert a fraction x of the form fracaa+b to a ratio of the form fracab. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.heavysolar-Tuple{}","page":"Home","title":"SolarChem.heavysolar","text":"heavysolar()\n\nReturn a Tuple of Period 5-6 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.innergroups-Tuple{}","page":"Home","title":"SolarChem.innergroups","text":"innergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the inner solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.jump-Tuple{Fractions, Fractions}","page":"Home","title":"SolarChem.jump","text":"jump(p::Fractions, j::Fractions; rng)\n\nPerturb a random field of p (outer,sun) with a random gaussian jump σ described by the corresponding field in j. Ensures that the new proposal satisfies that 0 < outer < 1 and 0 < sun < 1. Optionally supply a random number generation seed rng.\n\nsee also: Fractions\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.lightsolar-Tuple{}","page":"Home","title":"SolarChem.lightsolar","text":"lightsolar()\n\nReturn a Tuple of Period 1-3 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.lingce-NTuple{4, Number}","page":"Home","title":"SolarChem.lingce","text":"SolarChem.lingce(m, b, age, x)\n\nRecalculate the composition of element x for a star of a given age, correcting for galactic chemical evolution (GCE) with a linear regression of slope m and intercept b.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.lldist-NTuple{4, Float64}","page":"Home","title":"SolarChem.lldist","text":"lldist(μ, σ, μₒ, σₒ; n=100)\n\nCalculates the log-likelihood that the normally distributed measurement(s) μ ± σ was/were drawn from the model composition μₒ ± σₒ, integrated over n nodes of the 3σ limits of the model distribution. \n\nAccepts discrete Float64 values or vectors of Float64s for μ and σ. Values of NaN in modeled data are ignored and do not contribute to log-likelihood calculations.\n\nsee also: normpdf\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.loadastromatdata","page":"Home","title":"SolarChem.loadastromatdata","text":"    SolarChem.loadastromatdata(file::String)\n\nDEPRECATED: use astromatdata, which directly accesses the AstroMat API.\n\nLoad data exported from Astromat as a csv. Given underlying group and type assignment functions, this will only load chondrite data. \n\nsee also: assigngroup, assigntype, unitconversionfactor, readvalue\n\n\n\n\n\n","category":"function"},{"location":"#SolarChem.majors-Tuple{}","page":"Home","title":"SolarChem.majors","text":"majors()\n\nReturn a Tuple containing major elements.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.mediumsolar-Tuple{}","page":"Home","title":"SolarChem.mediumsolar","text":"mediumsolar(; Fe=true)\n\nReturn a Tuple of Period 4 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nExcludes :Fe by default, but Fe=true will include it. \n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.metadata-Tuple{}","page":"Home","title":"SolarChem.metadata","text":"metadata = (:name,:type,:group)\n\nReturn a Tuple of metadata names in the NamedTuple generated from Astromat data.  Still in development.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.normpdf-Union{Tuple{T}, Tuple{T, T, T}} where T<:Float64","page":"Home","title":"SolarChem.normpdf","text":"normpdf(x, m, s)\n\nCalculate the probability density of x given a normal distribution with mean m and standard deviation s. All inputs must be Float64s.\n\nmathcalL(mu pm sigma  x ) = f(x  mu pm sigma) = frace^-frac12 left( fracx-musigmaright)sigmasqrt2pi\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.outergroups-Tuple{}","page":"Home","title":"SolarChem.outergroups","text":"outergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the outer solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.periodictable-Tuple{}","page":"Home","title":"SolarChem.periodictable","text":"SolarChem.periodictable()\n\nReturn a Tuple containing all elements (as Symbols) in order of increasing Z, up to Z=96.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pullgroup-Union{Tuple{N}, Tuple{NamedTuple, NTuple{N, Symbol}}} where N","page":"Home","title":"SolarChem.pullgroup","text":"pullgroup(data, group; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided group(s) –- as a Symbol or Tuple of Symbols.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltopic-Union{Tuple{Nt}, Tuple{NamedTuple, Symbol, NTuple{Nt, String}}} where Nt","page":"Home","title":"SolarChem.pulltopic","text":"pulltopic(data, name, topic[s]; exactmatch=true)\n\nGiven a NamedTuple of data, returns a NamedTuple with all the names of data and only including those rows within under name (::Symbol) that contain the provided topic(s) –- as a String or Tuple of Strings.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltype-Union{Tuple{N}, Tuple{NamedTuple, NTuple{N, Int64}}} where N","page":"Home","title":"SolarChem.pulltype","text":"pulltype(data, type; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided type(s) –- as an Integer or Tuple of Integers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.quadgce-NTuple{4, Number}","page":"Home","title":"SolarChem.quadgce","text":"SolarChem.quadgce(a, b, age, x)\n\nRecalculate the composition of element x for a star of a given age, correcting for galactic chemical evolution (GCE) using a quadratic regression with parameters a and b of the form: at + bt^2\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.ratio2fraction-Tuple{Number}","page":"Home","title":"SolarChem.ratio2fraction","text":"fraction2ratio(x)\n\nAlgebraicaly convert a ratio x of the form fracab to a fraction of the form fracaa+b. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.ratiosummary-Tuple{NamedTuple, NamedTuple}","page":"Home","title":"SolarChem.ratiosummary","text":"ratiosummary(resampled_measurements, resampled_ratios; ratiocounts, minratios)\n\nCalculate ratio mean and standard deviation (1σ) from resampled_measurements calculated by bootstrapelements and resampled_ratios calculated bybootstrapratios. \n\nIf no ratios were calculated for a field in resampled_ratios (all values NaN), μ/σ are calculated from the corresponding resampled_measurements.\n\nOptionally, provide ratiocounts calculated by countratios and a minimum number of ratios minratios for each element required to use resampled_ratios. If the ratio counts for an element is less than minratios, μ/σ are calculated from the corressponding elements in resampled_measurements.\n\n\n\nNamedTuple(x) for some x = ratiosummary... will convert the result to a NamedTuple of Compositions.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.readvalue-Tuple{Number}","page":"Home","title":"SolarChem.readvalue","text":"readvalue(x)\n\nReturn a value x that is either a Number as a float or parses x if it's a String. An empty String yields NaN. Tolerates usage of commas in numbers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.removefrom-Tuple{Symbol, NamedTuple}","page":"Home","title":"SolarChem.removefrom","text":"removefrom(s, x)\n\nRemove key s and corresponding value from NamedTuple x. Alerts user if s is not present in x.\n\n\n\njulia> removefrom(:c, (; a=1, b=2, c=3))\n(a = 1, b = 2)\n\njulia> removefrom(:c, (; a=1, b=2))\n`:c` is not present in this NamedTuple\n(a = 1, b = 2)\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.solarlogmix-Union{Tuple{T}, Tuple{T, T, T, Fractions}} where T<:Composition","page":"Home","title":"SolarChem.solarlogmix","text":"solarlogmix(inner, outer, solar, f::Fractions; solarunc=true)\n\nCalculate the solar photosphere-normalized composition of a model Sun that ingests f.sun M⊙ of chondritic material comprised of f.outer proportion of outer solar system composition and 1 - f.outer proportion of inner solar system composition. The args inner, outer, and solar are all instances of a Composition struct. \n\nThe result is reported in dex, as the ratio of log-ratios: log10(X/D) - log10(X⊙/D⊙) where D denotes the ratio divisor (e.g. Fe, H) and ⊙ denotes solar compositions.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.solarmixmetropolis-Tuple{Int64, Fractions, Fractions, NamedTuple, NamedTuple}","page":"Home","title":"SolarChem.solarmixmetropolis","text":"solarmixmetropolis...\n\nMetropolis algorithm to estimate the requisite mixture of chondritic components added to the solar photosphere to match it to solar twin compositions.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.solartwins-Tuple{}","page":"Home","title":"SolarChem.solartwins","text":"solartwins(; gce=true, includesun=false)\n\nReturns a named tuple containing stellar parameters and solar-normalized compositions ([X/Fe], in dex) either corected for galactic chemical evolution (gce=true) or left uncorrected (gce=false). All corresponding uncertainty fields are preceded with s, e.g. :Ca and :sCa or logg and slogg. By default excludes the Sun (improves mixing model efficiency), but you can include solar data (mostly 0 dex by definition) with includesun=true.\n\nData is compiled from Bedell + 2018 (ApJ, doi:10.3847/1538-4357/aad908). Where multiple species are reported (e.g. CI-CH, ScI-ScII, TiI-TiII, CrI-CrII), this reports the mean and quadrature-propagated uncertainties of the two species.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.sun","page":"Home","title":"SolarChem.sun","text":"sun(divisor=nothing; logspace=true)\n\nReturns a NamedTuple containing the solar photosphere composition, as reported by Asplund+ 2021 [A&A, doi:10.1051/0004-6361/202140445]. Optionally provide an element name for divisoras a Symbol, to return the divisor-normalized ratios with uncertainties propagated in quadrature. logspace=false converts values and uncetainties to linear-space ratios. \n\n\n\n\n\n","category":"function"},{"location":"#SolarChem.trimextremes-Tuple{NamedTuple}","page":"Home","title":"SolarChem.trimextremes","text":"trimextremes(data; min=0, max=1)\n\nCycle through all elements in data and replace any value in excess of min and max (set by default to the physical limits of fractional mass abundance) to a NaN.\n\nUsing trimextremes! overwites data. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.trimnans-Union{Tuple{Nai}, Tuple{Nkz}, Tuple{NamedTuple, NTuple{Nkz, Symbol}}} where {Nkz, Nai}","page":"Home","title":"SolarChem.trimnans","text":"trimnans(data, names; alsoinclude = SolarChem.metadata)\n\nGiven a NamedTuple of data, return only the values and uncertainties of all non-NaN instances of name –- a name (::Symbol) or Tuple of names from data. Also returns the the Vectors corresponding to the fields listed in alsoinclude, which is by definition those defined by SolarChem.metadata.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.unitconversionfactor-Tuple{AbstractString}","page":"Home","title":"SolarChem.unitconversionfactor","text":"unitconversionfactor(str; io=stdout)\n\nReturns a unit conversion factor to scale measurements by to convert to mass fraction abundance based on the unit given in the heading str. By default, notifies user if a unit is ignored. \n\nincludes: wt% (%, %m/m), mg/g, μg/g (ppm), ng/g (ppb), pg/g excludes: at%, vol%, per mil, Ma, etc...\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.unweightedmean-Tuple{Vector, Vector}","page":"Home","title":"SolarChem.unweightedmean","text":"unweightedmean(m, s; sem=false)\n\nGiven values m (e.g. measurement means) with absolute 1σ uncertainty s, returns the unweighted mean and 1σ uncertainty estimated by addition in quadrature. \n\nsigma = sqrtsum^n_i=1 s_i^2\n\nIf sem=true, the 1σ uncertainty is the standard error of the mean (sigma_bar x = sigmasqrtn).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.weightedmean-Tuple{Vector, Vector}","page":"Home","title":"SolarChem.weightedmean","text":"weightedmean(m, s)\n\nGiven values m (e.g. measurement means) with absolute 1σ uncertainties s, returns the variance-weighted mean and 1σ uncertainty. \n\nmu = fracsum^n_i=1 x_isigma_i^-2sum^n_i=1sigma_i^-2\n\nsigma = sqrtfrac1sum^n_i=1sigma_i^-2\n\n\n\n\n\n","category":"method"}]
}
