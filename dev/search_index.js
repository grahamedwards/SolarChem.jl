var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SolarChem","category":"page"},{"location":"#SolarChem","page":"Home","title":"SolarChem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SolarChem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SolarChem]","category":"page"},{"location":"#SolarChem.oxideconversion","page":"Home","title":"SolarChem.oxideconversion","text":"oxideconversion\n\nA NamedTuple with names of elements corresponding to a multiplicative factor to convert oxide composition to elemental composition. Fe corresponds to ferrous iron (FeO) and Fe3 to ferric iron (Fe₂O₃). oxideconversion is a const within the scope of the SolarChem module. \n\n\n\nCaO * oxideconversion.Ca = Ca\n\nCa / oxideconversion.Ca = CaO\n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.strelements","page":"Home","title":"SolarChem.strelements","text":"SolarChem.strelements\n\nA Tuple containing all elements in order of increasing Z (up to Z=96) as a String followed by a space. Derived from SolarChem.periodictable for use inside loadastromatdata. A const within the scope of the SolarChem module. \n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.allsolar-Tuple{}","page":"Home","title":"SolarChem.allsolar","text":"allsolar(; Fe=false)\n\nReturn a Tuple of all elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908). Excludes :Fe by default, but Fe=true will include it. \n\nsee also: lightsolar, mediumsolar, heavysolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.assigngroup-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigngroup","text":"assigngroup(str)\n\nAssign all corresponding genetic groups to a String str containing meteorite group/type information. See innergroups and outergroups for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.assigntype-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigntype","text":"assigntype(str)\n\nAssign all corresponding genetic groups to a String `str` containing meteorite group/type information. See [`innergroups`](@ref) and [`outergroups`](@ref) for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapelements-Tuple{Int64, NamedTuple, Tuple{Vararg{Symbol}}}","page":"Home","title":"SolarChem.bootstrapelements","text":"bootstrapelements(n::Int, data::NamedTuple, elements; resamplemeans=true, weighted=true, rng)\n\nReturns a NamedTuple of vectors of n bootstrap resampled data for each element in the Tuple elements. \n\nResamples Monte Carlo'ed means by default. Declare resamplemeans=false to return resampled values. \n\nBy default weights resampling by sample abundance (based on occurences of unique meteorite names (field :name in data). To remove weighting, declare weighted=false. \n\nsee also: trimnans, calcweights, bsresample, bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapratios-Tuple{Int64, NamedTuple, Tuple{Vararg{Symbol}}, Symbol}","page":"Home","title":"SolarChem.bootstrapratios","text":"bootstrapratios(n::Int, data::NamedTuple, elements, divisor::Symbol; resamplemeans=true, fractional=false, weighted=true, rng)\n\nReturns a NamedTuple of vectors of n bootstrap resampled data for each element in the Tuple elements, as a ratio of element/divisor (calculated prior to resampling).\n\nResamples Monte Carlo'ed means by default. Declare resamplemeans=false to return resampled values. \n\nfractional=true resamples ratios as fractions fracxx+y and then algebraically converted to ratios fracxy. This mitigates resampled outliers stemming from small values of y. If fractional=false,  ratios are calculated directly.\n\nBy default weights resampling by sample abundance (based on occurences of unique meteorite names (field :name in data). To remove weighting, declare weighted=false. \n\nsee also: trimnans, calcweights, bsresample, bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsmean!-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsmean!","text":"bsmean!(v, x, σ; w, rng)\n\nIn-place version of bsmean that takes a vector v to fill with resampled means.\n\nsee also: bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsmean-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsmean","text":"bsmean(n, x, σ; w, rng)\n\nReturns a Vector of n means, each calculated from a random resampling (with replacement) of dataset x with (normally distributed) 1σ uncertainties σ. Optionally provide weights (obtained from calcweights, unweighted by default) and a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsresample!-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsresample!","text":"bsresample!(v, x, σ; w, rng)\n\nIn-place version of bsresample that takes a vector v to fill with resamples.\n\nsee also: bsmean\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bsresample-Union{Tuple{T}, Tuple{Int64, Vector{T}, Vector{T}}} where T<:Float64","page":"Home","title":"SolarChem.bsresample","text":"bsresample(n, x, σ; w, rng)\n\nReturns a Vector of n random samples from dataset x with (normally distributed) 1σ uncertainties σ. Optionally provide weights w (obtained from calcweights, unweighted by default) and a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.calcweights-Union{Tuple{Vector}, Tuple{T}} where T<:Number","page":"Home","title":"SolarChem.calcweights","text":"calcweights(v ; weightings)\n\nCalculate weightings for a population v for a non-biased sampling of the population.  Optionally give weightings as a Dict of \"type\" => x to further suppress values of \"type\" by a factor of x.\n\ne.g.     julia> v = [\"a\", \"b\", \"a\"]     julia> calcweights(v)     3-element Vector{Float64}:      0.5      1.0      0.5\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countmeasurements-Tuple{NamedTuple, Tuple{Vararg{Symbol}}}","page":"Home","title":"SolarChem.countmeasurements","text":"countmeasurements(d::NamedTuple, element::Symbol)\n\nReturns the total number of measurements for a given element in d. \n\n\n\ncountmeasurements(d::NamedTuple, elements::Tuple)\n\nReturns a NamedTuple with names in elements and the total number of measurements for each member of elements in d. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countnotnans-Tuple{Any}","page":"Home","title":"SolarChem.countnotnans","text":"SolarChem.countnotnans(x)\n\nCount the number of non-NaN elements in x.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.countratios-Union{Tuple{T}, Tuple{NamedTuple, Tuple{Vararg{T}}, T}} where T<:Symbol","page":"Home","title":"SolarChem.countratios","text":"countratios(d::NamedTuple, numerator::Symbol, denomenator::Symbol)\n\nReturns the total number of non-NaN ratios of numerator/denomenator in d. \n\n\n\ncountmeasurements(d::NamedTuple, numerators::Tuple, denomenator::Symbol)\n\nReturns a NamedTuple with names in numerators and the total number of non-NaN ratios in d for each ratio of numerators ./ denomenator.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.estimateuncertainty-Tuple{NamedTuple, Number}","page":"Home","title":"SolarChem.estimateuncertainty","text":"estimateuncertainty(d, unc; uncextrema, minuncs)\n\nCalculate an assumed uncertainty unc (in %) for all analytes in NamedTuple d. Replaces any values outside the bounds of the minimum and maximum percent uncertainty (uncextrema= (0.01%, 50%) by default) with unc. If there are > minuncs (30 by default) uncertainties corresponding to measurements of an analyte, it calculates unreported uncertainties as the mean relative uncertainty of all measurements within uncextrema.\n\nRequires that uncertainties are given as 1σ with keys :sX where X is the analyte name (e.g. :Na -> :sNa).\n\nUsing estimateuncertainty! overwrites d.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.exclude-Union{Tuple{N}, Tuple{NamedTuple, Symbol, Tuple{Vararg{String, N}}}} where N","page":"Home","title":"SolarChem.exclude","text":"exclude(data::NamedTuple, name::Symbol, s)\n\nExclude all indices containing string (or Tuple of strings) s from the specified name in data.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.excludeheated-Tuple{NamedTuple}","page":"Home","title":"SolarChem.excludeheated","text":"excludeheated(d::NamedTuple)\n\nExclude data associated with heating experiments from d. Removes all rows with comments containing °, degrees, 0 C, and 5 C.\n\nsee also: exclude\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.fraction2ratio!-Tuple{Vector{Float64}}","page":"Home","title":"SolarChem.fraction2ratio!","text":"fraction2ratio!(x::Vector)\n\nConvert a Vector of fractions x to ratios, as by fraction2ratio.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.fraction2ratio-Tuple{Number}","page":"Home","title":"SolarChem.fraction2ratio","text":"fraction2ratio(x)\n\nAlgebraicaly convert a fraction x of the form fracaa+b to a ratio of the form fracab. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.heavysolar-Tuple{}","page":"Home","title":"SolarChem.heavysolar","text":"heavysolar()\n\nReturn a Tuple of Period 5-6 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.innergroups-Tuple{}","page":"Home","title":"SolarChem.innergroups","text":"innergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the inner solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.lightsolar-Tuple{}","page":"Home","title":"SolarChem.lightsolar","text":"lightsolar()\n\nReturn a Tuple of Period 1-3 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.loadastromatdata","page":"Home","title":"SolarChem.loadastromatdata","text":"loadastromatdata(file::String)\n\nLoad data exported from Astromat as a csv. Given underlying group and type assignment functions, this will only load chondrite data. \n\nsee also: assigngroup, assigntype, unitconversionfactor, readvalue\n\n\n\n\n\n","category":"function"},{"location":"#SolarChem.majors-Tuple{}","page":"Home","title":"SolarChem.majors","text":"majors()\n\nReturn a Tuple containing major elements.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.mediumsolar-Tuple{}","page":"Home","title":"SolarChem.mediumsolar","text":"mediumsolar(; Fe=false)\n\nReturn a Tuple of Period 4 elements with solar twin data reported in Bedell+ 2018 (ApJ, doi:10.3847/1538-4357/aad908).\n\nExcludes :Fe by default, but Fe=true will include it. \n\nsee also: allsolar\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.metadata-Tuple{}","page":"Home","title":"SolarChem.metadata","text":"metadata = (:name,:type,:group)\n\nReturn a Tuple of metadata names in the NamedTuple generated from Astromat data.  Still in development.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.outergroups-Tuple{}","page":"Home","title":"SolarChem.outergroups","text":"outergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the outer solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.periodictable-Tuple{}","page":"Home","title":"SolarChem.periodictable","text":"SolarChem.periodictable()\n\nReturn a Tuple containing all elements (as Symbols) in order of increasing Z, up to Z=96.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pullgroup-Union{Tuple{N}, Tuple{NamedTuple, Tuple{Vararg{Symbol, N}}}} where N","page":"Home","title":"SolarChem.pullgroup","text":"pullgroup(data, group; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided group(s) –- as a Symbol or Tuple of Symbols.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltopic-Union{Tuple{Nt}, Tuple{NamedTuple, Symbol, Tuple{Vararg{String, Nt}}}} where Nt","page":"Home","title":"SolarChem.pulltopic","text":"pulltopic(data, name, topic[s]; exactmatch=true)\n\nGiven a NamedTuple of data, returns a NamedTuple with all the names of data and only including those rows within under name (::Symbol) that contain the provided topic(s) –- as a String or Tuple of Strings.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltype-Union{Tuple{N}, Tuple{NamedTuple, Tuple{Vararg{Int64, N}}}} where N","page":"Home","title":"SolarChem.pulltype","text":"pulltype(data, type; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided type(s) –- as an Integer or Tuple of Integers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.ratio2fraction-Tuple{Number}","page":"Home","title":"SolarChem.ratio2fraction","text":"fraction2ratio(x)\n\nAlgebraicaly convert a ratio x of the form fracab to a fraction of the form fracaa+b. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.ratiosummary-Tuple{NamedTuple, NamedTuple}","page":"Home","title":"SolarChem.ratiosummary","text":"ratiosummary(resampled_measurements, resampled_ratios; ratiocounts, minratios)\n\nCalculate ratio mean and standard deviation (1σ) from resampled_measurements calculated by bootstrapelements and resampled_ratios calculated bybootstrapratios. \n\nIf no ratios were calculated for a field in resampled_ratios (all values NaN), μ/σ are calculated from the corresponding resampled_measurements.\n\nOptionally, provide ratiocounts calculated by countratios and a minimum number of ratios minratios for each element required to use resampled_ratios. If the ratio counts for an element is less than minratios, μ/σ are calculated from the corressponding elements in resampled_measurements.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.readvalue-Tuple{Number}","page":"Home","title":"SolarChem.readvalue","text":"readvalue(x)\n\nReturn a value x that is either a Number as a float or parses x if it's a String. An empty String yields NaN. Tolerates usage of commas in numbers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.solartwins-Tuple{}","page":"Home","title":"SolarChem.solartwins","text":"solartwins(; gce=true)\n\nReturns a named tuple containing stellar parameters and solar-normalized compositions ([X/Fe], in dex) either corected for galactic chemical evolution (gce=true) or left uncorrected (gce=false). All corresponding uncertainty fields are preceded with s, e.g. :Ca and :sCa or logg and slogg.\n\nData is compiled from Bedell + 2018 (ApJ, doi:10.3847/1538-4357/aad908). Where multiple species are reported (e.g. CI-CH, ScI-ScII, TiI-TiII, CrI-CrII), this reports the mean and quadrature-propagated uncertainties of the two species.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.trimextremes-Tuple{NamedTuple}","page":"Home","title":"SolarChem.trimextremes","text":"trimextremes(data; min=0, max=1)\n\nCycle through all elements in data and replace any value in excess of min and max (set by default to the physical limits of fractional mass abundance) to a NaN.\n\nUsing trimextremes! overwites data. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.trimnans-Union{Tuple{Nai}, Tuple{Nkz}, Tuple{NamedTuple, Tuple{Vararg{Symbol, Nkz}}}} where {Nkz, Nai}","page":"Home","title":"SolarChem.trimnans","text":"trimnans(data, names; alsoinclude = SolarChem.metadata)\n\nGiven a NamedTuple of data, return only the values and uncertainties of all non-NaN instances of name –- a name (::Symbol) or Tuple of names from data. Also returns the the Vectors corresponding to the fields listed in alsoinclude, which is by definition those defined by SolarChem.metadata.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.unitconversionfactor-Tuple{AbstractString}","page":"Home","title":"SolarChem.unitconversionfactor","text":"unitconversionfactor(str)\n\nReturns a unit conversion factor to scale measurements by to convert to mass fraction abundance based on the unit given in the heading str. \n\nincludes: wt% (%, %m/m), mg/g, μg/g (ppm), ng/g (ppb), pg/g excludes: at%, vol%\n\n\n\n\n\n","category":"method"}]
}
