var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SolarChem","category":"page"},{"location":"#SolarChem","page":"Home","title":"SolarChem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SolarChem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SolarChem]","category":"page"},{"location":"#SolarChem.oxideconversion","page":"Home","title":"SolarChem.oxideconversion","text":"oxideconversion\n\nA NamedTuple with names of elements corresponding to a multiplicative factor to convert oxide composition to elemental composition. Fe corresponds to ferrous iron (FeO) and Fe3 to ferric iron (Fe₂O₃). oxideconversion is a const within the scope of the SolarChem module. \n\n\n\nCaO * oxideconversion.Ca = Ca\n\nCa / oxideconversion.Ca = CaO\n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.strelements","page":"Home","title":"SolarChem.strelements","text":"SolarChem.strelements\n\nA Tuple containing all elements in order of increasing Z (up to Z=96) as a String followed by a space. Derived from SolarChem.periodictable for use inside loadastromatdata. A const within the scope of the SolarChem module. \n\n\n\n\n\n","category":"constant"},{"location":"#SolarChem.assigngroup-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigngroup","text":"assigngroup(str)\n\nAssign all corresponding genetic groups to a String str containing meteorite group/type information. See innergroups and outergroups for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.assigntype-Tuple{AbstractString}","page":"Home","title":"SolarChem.assigntype","text":"assigntype(str)\n\nAssign all corresponding genetic groups to a String `str` containing meteorite group/type information. See [`innergroups`](@ref) and [`outergroups`](@ref) for groups.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapmean-Tuple{Int64, Vector, Vector, Vector}","page":"Home","title":"SolarChem.bootstrapmean","text":"bootstrapmean(n, x, σ, weights; rng)\n\nReturns a Vector of n means, each calculated from a random resampling of dataset x with (normally distributed) 1σ uncertainties σ, given weights (obtained from calcweights). If you desire unweighted resamplings provide ones(length(x)) for weights.\n\nOptionally provide a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.bootstrapresample-Tuple{Int64, Vector, Vector, Vector}","page":"Home","title":"SolarChem.bootstrapresample","text":"bootstrapresample(n, x, σ, weights; rng)\n\nReturns a Vector of n random samples from dataset x with (normally distributed) 1σ uncertainties σ, given weights (obtained from calcweights). If you desire an unweighted resample provide ones(length(x)) for weights.\n\nOptionally provide a (pseudo)random number generator rng (default: Xoshiro256++).\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.calcweights-Union{Tuple{Vector}, Tuple{T}} where T<:Number","page":"Home","title":"SolarChem.calcweights","text":"calcweights(v ; weightings)\n\nCalculate weightings for a population v for a non-biased sampling of the population.  Optionally give weightings as a Dict of \"type\" => x to further suppress values of \"type\" by a factor of x.\n\ne.g.     julia> v = [\"a\", \"b\", \"a\"]     julia> calcweights(v)     3-element Vector{Float64}:      0.5      1.0      0.5\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.estimateuncertainty-Tuple{NamedTuple, Number}","page":"Home","title":"SolarChem.estimateuncertainty","text":"estimateuncertainty(d, unc; uncextrema, minuncs)\n\nCalculate an assumed uncertainty unc (in %) for all analytes in NamedTuple d. Replaces any values outside the bounds of the minimum and maximum percent uncertainty (uncextrema= (0.01%, 50%) by default) with unc. If there are > minuncs (30 by default) uncertainties corresponding to measurements of an analyte, it calculates unreported uncertainties as the mean relative uncertainty of all measurements within uncextrema.\n\nRequires that uncertainties are given as 1σ with keys :sX where X is the analyte name (e.g. :Na -> :sNa).\n\nUsing estimateuncertainty! overwrites d.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.exclude-Union{Tuple{N}, Tuple{NamedTuple, Symbol, Tuple{Vararg{String, N}}}} where N","page":"Home","title":"SolarChem.exclude","text":"exclude(data::NamedTuple, name::Symbol, s)\n\nExclude all indices containing string (or Tuple of strings) s from the specified name in data.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.innergroups-Tuple{}","page":"Home","title":"SolarChem.innergroups","text":"innergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the inner solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.metadata-Tuple{}","page":"Home","title":"SolarChem.metadata","text":"metadata = (:name,:type,:group)\n\nReturn a Tuple of metadata names in the NamedTuple generated from Astromat data.  Still in development.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.outergroups-Tuple{}","page":"Home","title":"SolarChem.outergroups","text":"outergroups()\n\nReturn a Tuple containing all chondrite genetic groups associated with the outer solar system and used in SolarChem.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.periodictable-Tuple{}","page":"Home","title":"SolarChem.periodictable","text":"SolarChem.periodictable()\n\nReturn a Tuple containing all elements (as Symbols) in order of increasing Z, up to Z=96.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pullgroup-Union{Tuple{N}, Tuple{NamedTuple, Tuple{Vararg{Symbol, N}}}} where N","page":"Home","title":"SolarChem.pullgroup","text":"pullgroup(data, group; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided group(s) –- as a Symbol or Tuple of Symbols.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltopic-Union{Tuple{Nt}, Tuple{NamedTuple, Symbol, Tuple{Vararg{String, Nt}}}} where Nt","page":"Home","title":"SolarChem.pulltopic","text":"pulltopic(data, name, topic[s]; exactmatch=true)\n\nGiven a NamedTuple of data, returns a NamedTuple with all the names of data and only including those rows within under name (::Symbol) that contain the provided topic(s) –- as a String or Tuple of Strings.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.pulltype-Union{Tuple{N}, Tuple{NamedTuple, Tuple{Vararg{Int64, N}}}} where N","page":"Home","title":"SolarChem.pulltype","text":"pulltype(data, type; exactmatch=false)\n\nGiven a NamedTuple of chondrite data, returns a NamedTuple with all the names of data, including only the rows corresponding to the provided type(s) –- as an Integer or Tuple of Integers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.readvalue-Tuple{Number}","page":"Home","title":"SolarChem.readvalue","text":"readvalue(x)\n\nReturn a value xthat is either aNumberas a float or parsesxif it's a String. An empty String yieldsNaN`. Tolerates usage of commas in numbers.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.trimextremes-Tuple{NamedTuple}","page":"Home","title":"SolarChem.trimextremes","text":"trimextremes(data; min=0, max=1)\n\nCycle through all elements in data and replace any value in excess of min and max (set by default to the physical limits of fractional mass abundance) to a NaN.\n\nUsing trimextremes! overwites data. \n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.trimnans-Union{Tuple{Nai}, Tuple{Nkz}, Tuple{NamedTuple, Tuple{Vararg{Symbol, Nkz}}}} where {Nkz, Nai}","page":"Home","title":"SolarChem.trimnans","text":"trimnans(data, names; alsoinclude = SolarChem.metadata)\n\nGiven a NamedTuple of data, return only the values and uncertainties of all non-NaN instances of name –- a name (::Symbol) or Tuple of names from data. Also returns the the Vectors corresponding to the fields listed in alsoinclude, which is by definition those defined by SolarChem.metadata.\n\n\n\n\n\n","category":"method"},{"location":"#SolarChem.unitconversionfactor-Tuple{AbstractString}","page":"Home","title":"SolarChem.unitconversionfactor","text":"unitconversionfactor(str)\n\nReturns a unit conversion factor to scale measurements by to convert to mass fraction abundance based on the unit given in the heading str. \n\nincludes: wt% (%, %m/m), mg/g, μg/g (ppm), ng/g (ppb), pg/g excludes: at%, vol%\n\n\n\n\n\n","category":"method"}]
}
